generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())
  createdAt DateTime  @default(now())
  biography String @db.VarChar(500)
  email String @unique
  handle String @unique @db.VarChar(20)
  isAdmin Boolean @default(false)
  posts Post[]
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
}

model Post {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  body String @db.VarChar(500)
  summarizationCount Int @default(0)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Reply relationships
  parentId String?
  parent Post? @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Post[] @relation("PostReplies")

  // History
  bodies PostBody[]

  @@index([parentId])
}

model PostBody {
  id String @id @default(cuid())
  body String @db.VarChar(500)
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([createdAt])
}

model Follow {
  createdAt DateTime @default(now())
  followerId String
  followingId String
  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model EmailWhitelist {
  id String @id @default(cuid())
  email String @unique
  createdAt DateTime @default(now())

  @@index([email])
}